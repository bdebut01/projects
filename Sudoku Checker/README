Completed for the Tufts CS course: 
	Comp 40: Machine Structure and Assembly Language Programming
	with Professor Noah Mendelsohn
	Done collaboratively with Sam Duncan
	Spring 2014
Note: not compilable or runnable. Solver requires Pnmrdr which was linked in through Tufts networks upon completion and testing of this assignment. 
Therefore this is strictly for observing and appreciating.

Thanks for the TAs that helped us, in particular Andrew Stephens.

Everything, so far as we know, has been correctly implemented.

Bit2 & UArray2:
In Bit2 and UArray2, we made representations of 2D arrays, based on Hanson's
Bit Vectors and Unboxed Arrays, respectively.
In each case, we implemented the 2D array abstraction with a single array large
enough to contain all the elements of the 2D array.

Sudoku: 
This program used our UArray2 interface to check the validity of a
sudoku solution. In addition to the array used to represent the sudoku board,
we used three further instances of our UArray2: 
        1) the rows represented rows in the board and the columns represented
                values appearing in each row
        2) the rows represented columns in the board and the columns
                represented values appearing in each columns
        3) the rows represented the 3x3 boxes into which the sudoku board is
                divided and the columns represented values appearing 
                in each box
If a correct solution was given as input, when the board had been fully
processed, each of these counter arrays would hold a value of 1 at every
position.